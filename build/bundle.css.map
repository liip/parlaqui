{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte",
    "../../src/Game.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { tweened } from 'svelte/motion'\n\timport Game from './Game.svelte'\n\tlet playing = false\n\tlet ende = false\n\tlet lastScore = null\n\n\tfunction play() {\n\t\tplaying = true\n\t}\n\tfunction stop() {\n\t\tplaying = false\n\t\tende = true\n\t}\n\tfunction end(e) {\n\t\tplaying = false\n\t\tende = true\n\t\tlastScore = e.detail\n\t}\n\tfunction onKeydown(e) {\n        switch(e.key) {\n            case \" \":\n                play()\n\t\t\t\tbreak\n\t\t}\n\t}\n\tfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n\t\tvar angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n\n\t\treturn {\n\t\t\tx: centerX + (radius * Math.cos(angleInRadians)),\n\t\t\ty: centerY + (radius * Math.sin(angleInRadians))\n\t\t};\n\t}\n\t/*\n\tlet tw = tweened(0, { duration: 5000 })\n\ttw.set(359)\n\n\t$: opts = {\n\t\tcx: 200,\n\t\tcy: 200,\n\t\tradius: 200,\n\t\tstart_angle: 0,\n\t\tend_angle: $tw,\n\t};\n\n\t$: start = polarToCartesian(opts.cx, opts.cy, opts.radius, opts.end_angle)\n\t$: end2 = polarToCartesian(opts.cx, opts.cy, opts.radius, opts.start_angle)\n\t$: largeArcFlag = opts.end_angle - opts.start_angle <= 180 ? \"0\" : \"1\"\n\n\t$: d = [\n\t\t\"M\", start.x, start.y,\n\t\t\"A\", opts.radius, opts.radius, 0, largeArcFlag, 0, end2.x, end2.y,\n\t\t\"L\", opts.cx, opts.cy,\n\t\t\"Z\"\n\t].join(\" \");\n\t*/\n</script>\n<style>\n\tmain {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\tpadding: 0 1rem;\n\t\twidth: 340px;\n\t}\n</style>\n<svelte:window on:keydown={onKeydown} />\n<main>\n\t<h1>Guess the Politician</h1>\n\t{#if playing}\t\t\n\t\t<Game on:end={end} />\n\t\t<button on:click={stop}>Quit</button>\n\t{:else}\n\t\t<button on:click={play}>Play</button>\n\t\t{#if lastScore !== null}\n\t\t\t<h2>Your Score: {lastScore}</h2>\n\t\t{/if}\t\n\t{/if}\n\t<!--\n\t<svg viewBox=\"0 0 400 400\" width=\"400\" height=\"400\">\n\t\t<path fill=\"orange\" stroke=\"none\" fill-rule=\"evenodd\" d={d} />\n\t</svg>\n\t-->\n</main>\n",
    "<script>\n    import { createEventDispatcher, onDestroy } from 'svelte'\n    import { readable } from 'svelte/store'\n    import { tweened } from 'svelte/motion'\n    import politicians from '../councillors.json'\n    let counter = 0\n    const dispatch = createEventDispatcher()\n    let time = readable()\n    let politician = {}\n    let answers = []\n    let rightAnswers = 0\n    let showResults = false\n    const maxAnswers = 10\n    const maxTime = 10000\n    let timer\n    let answerTimer\n\n    onDestroy(() => {\n        clearTimeout(timer)\n        clearTimeout(answerTimer)\n    })\n    \n    function next() {\n        generateAnswers()\n        politician = answers.filter(a => a.wright)[0]\n        counter++\n        time = tweened(1, { duration: maxTime, delay: 1000 })\n        time.set(0)\n        \n        timer = setTimeout(() => {\n            onAnswer({ wright: false })\n        }, maxTime + 1000)\n\n        if(counter > maxAnswers) {\n            dispatch('end', rightAnswers)\n        }\n    }\n    next()\n    \n    function onAnswer(answer) {\n        if(showResults) {\n            return\n        }\n        clearTimeout(timer)\n        showAnswers()    \n        rightAnswers += answer.wright * Math.floor($time * maxTime / 1000)\n        time = readable($time)\n    }\n\n    // random number in [min, max[\n    function rand(min, max) {\n        min = Math.ceil(min)\n        max = Math.floor(max)\n        return Math.floor(Math.random() * (max - min)) + min\n    }\n    \n    function generateAnswers() {\n        const maxAnswers = 4\n        // random take on item to filter by gender or the answers are too obvious\n        const filter = politicians[rand(0, politicians.length)]\n        \n        const arr = [...politicians.filter(p => p.GenderAsString === filter.GenderAsString)]\n        const res = []\n        const wrightAnswer = rand(0, maxAnswers)\n        for(let i=0; i<maxAnswers; i++) {\n            const index = rand(0, arr.length)\n            const pol = arr.splice(index, 1)[0]\n            pol.wright = i === wrightAnswer\n            res.push(pol)\n        }\n        answers = res\n    }\n    function showAnswers() {\n        showResults = true\n        answerTimer = setTimeout(() => {\n            showResults = false\n            next()\n        }, 1000)\n    }\n\n    function onKeydown(e) {\n        switch(e.key) {\n            case \"1\":\n                onAnswer(answers[0])\n                break\n            case \"2\":\n                onAnswer(answers[1])\n                break\n            case \"3\":\n                onAnswer(answers[2])\n                break\n            case \"4\":\n                onAnswer(answers[3])\n                break\n            case \"Escape\":\n                dispatch('end', null)\n                break\n        }\n    }\n</script>\n<svelte:window on:keydown={onKeydown} />\n<section>\n<img src={politician.ImageUrl} alt=\"image of\">\n<div>\n    <progress value={$time} />\n</div>\n<div class=\"buttons\">\n{#each answers as answer}\n<button on:click={() => onAnswer(answer)} class={showResults ? (answer.wright ? 'wright' : 'wrong') : ''}>{answer.FirstName} {answer.LastName}</button>\n{/each}\n</div>\n{rightAnswers}\n</section>\n<style>\n    .buttons {\n        padding-top: 1rem;\n    }\n    button {\n        width: 100%;\n    }\n    button:focus {\n        outline: 0;\n        border-color: transparent;\n    }\n    section {\n        text-align: center;\n    }\n    progress {\n        width: 100%;\n    }\n    .wrong {\n        background-color: red;\n    }\n    .wright {\n        background-color: green;\n    }\n    img {\n        width: 260px;\n        height: 260px;\n        border-radius: 50%;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AA2DC,IAAI,eAAC,CAAC,AACL,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,OAAO,CAAE,CAAC,CAAC,IAAI,CACf,KAAK,CAAE,KAAK,AACb,CAAC;ACkDE,QAAQ,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,AACrB,CAAC,AACD,MAAM,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,AACf,CAAC,AACD,qBAAM,MAAM,AAAC,CAAC,AACV,OAAO,CAAE,CAAC,CACV,YAAY,CAAE,WAAW,AAC7B,CAAC,AACD,OAAO,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,QAAQ,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACf,CAAC,AACD,MAAM,eAAC,CAAC,AACJ,gBAAgB,CAAE,GAAG,AACzB,CAAC,AACD,OAAO,eAAC,CAAC,AACL,gBAAgB,CAAE,KAAK,AAC3B,CAAC,AACD,GAAG,eAAC,CAAC,AACD,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,aAAa,CAAE,GAAG,AACtB,CAAC"
}