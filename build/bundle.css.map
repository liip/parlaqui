{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte",
    "../../src/Game.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { tweened } from 'svelte/motion'\n\timport Game from './Game.svelte'\n\tlet playing = false\n\tlet ende = false\n\tlet lastScore = null\n\n\tfunction play() {\n\t\tplaying = true\n\t}\n\tfunction stop() {\n\t\tplaying = false\n\t\tende = true\n\t}\n\tfunction end(e) {\n\t\tplaying = false\n\t\tende = true\n\t\tlastScore = e.detail\n\t}\n</script>\n<style>\n\tmain {\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\tpadding: 0 1rem;\n\t\twidth: 340px;\n\t}\n\tbutton {\n\t\tmargin-top: 1rem;\n\t\twidth: 100%;\n\t}\n</style>\n<main>\n\t<h1>Guess the Politician</h1>\n\t{#if playing}\t\t\n\t\t<Game on:end={end} />\n\t\t<button on:click={stop}>Quit</button>\n\t{:else}\n\t\t<button on:click={play}>Play</button>\n\t\t{#if lastScore !== null}\n\t\t\t<h2>Your Score: {lastScore}</h2>\n\t\t{/if}\t\n\t{/if}\n</main>\n",
    "<script>\n    import { createEventDispatcher, onDestroy } from 'svelte'\n    import { readable } from 'svelte/store'\n    import { tweened } from 'svelte/motion'\n    import { rand } from './util'\n    import politicians from '../councillors.json'\n    const dispatch = createEventDispatcher()\n    const maxRounds = 10\n    const maxTime = maxRounds * 1000\n    const maxAnswers = 4\n    let round = 0\n    let time = readable()\n    let politician = {}\n    let answers = []\n    let score = 0\n    let showResults = false\n    let timer\n    let answerTimer\n    $: currentScore = Math.floor($time * 10)\n\n    onDestroy(() => {\n        clearTimeout(timer)\n        clearTimeout(answerTimer)\n    })\n    \n    next()\n    \n    function next() {\n        generateAnswers()\n        politician = answers.filter(a => a.wright)[0]\n        round++\n        time = tweened(1, { duration: maxTime, delay: 1000 })\n        time.set(0)\n        \n        timer = setTimeout(() => {\n            onAnswer({ wright: false })\n        }, maxTime + 1000)\n\n        if(round > maxRounds) {\n            dispatch('end', score)\n        }\n    }\n    \n    function onAnswer(answer) {\n        if(showResults) {\n            return\n        }\n        clearTimeout(timer)\n        showAnswers()    \n        score += answer.wright * currentScore\n        time = readable($time)\n    }\n\n    function generateAnswers() {\n        // randomly take one item to set the gender\n        const filter = politicians[rand(0, politicians.length)]\n        // filter by gender, or answers could be too obvious\n        const arr = [...politicians.filter(p => p.GenderAsString === filter.GenderAsString)]\n        const res = []\n        const wrightAnswer = rand(0, maxAnswers)\n        for(let i=0; i<maxAnswers; i++) {\n            const index = rand(0, arr.length)\n            const answer = arr.splice(index, 1)[0]\n            answer.wright = i === wrightAnswer\n            res.push(answer)\n        }\n        answers = res\n    }\n\n    function showAnswers() {\n        showResults = true\n        answerTimer = setTimeout(() => {\n            showResults = false\n            next()\n        }, 1000)\n    }\n\n    const answerLabel = ({FirstName, LastName, PartyAbbreviation}) => `${FirstName} ${LastName} (${PartyAbbreviation})`\n</script>\n<style>\n    .buttons {\n        padding-top: 1rem;\n    }\n    button {\n        width: 100%;\n    }\n    button:focus {\n        outline: 0;\n        border-color: #ccc;\n    }\n    section {\n        text-align: center;\n    }\n    progress {\n        width: 100%;\n    }\n    .wrong {\n        background-color: red;\n    }\n    .wright {\n        background-color: green;\n    }\n    img {\n        width: 260px;\n        height: 260px;\n        border-radius: 50%;\n    }\n</style>\n\n<section>\n<img src={politician.ImageUrl} alt=\"image of\">\n<div>\n    {currentScore}<progress value={$time} />\n</div>\n<div class=\"buttons\">\n{#each answers as answer}\n<button on:click={() => onAnswer(answer)} class={showResults ? (answer.wright ? 'wright' : 'wrong') : ''}>{answerLabel(answer)}</button>\n{/each}\n</div>\nScore: {score}\n</section>\n"
  ],
  "names": [],
  "mappings": "AAqBC,IAAI,cAAC,CAAC,AACL,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,OAAO,CAAE,CAAC,CAAC,IAAI,CACf,KAAK,CAAE,KAAK,AACb,CAAC,AACD,MAAM,cAAC,CAAC,AACP,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,AACZ,CAAC;ACkDE,QAAQ,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,AACrB,CAAC,AACD,MAAM,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,AACf,CAAC,AACD,qBAAM,MAAM,AAAC,CAAC,AACV,OAAO,CAAE,CAAC,CACV,YAAY,CAAE,IAAI,AACtB,CAAC,AACD,OAAO,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,QAAQ,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACf,CAAC,AACD,MAAM,eAAC,CAAC,AACJ,gBAAgB,CAAE,GAAG,AACzB,CAAC,AACD,OAAO,eAAC,CAAC,AACL,gBAAgB,CAAE,KAAK,AAC3B,CAAC,AACD,GAAG,eAAC,CAAC,AACD,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,aAAa,CAAE,GAAG,AACtB,CAAC"
}